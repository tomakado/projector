package projector

import (
	"bytes"
	"embed"
	"fmt"
	"io"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"
)

// Generate traverses template manifest passed inside config and executes listed steps with config passed as context.
func Generate(config *Config) error {
	g := &generator{config: config}
	return g.Generate()
}

type generator struct {
	config *Config
}

func (g *generator) Generate() error {
	if err := os.MkdirAll(g.config.WorkingDirectory, os.ModePerm); err != nil {
		return fmt.Errorf("failed to mkdir %q: %w", g.config.WorkingDirectory, err)
	}

	if err := os.Chdir(g.config.WorkingDirectory); err != nil {
		return fmt.Errorf("failed to change working directory to %q: %w", g.config.WorkingDirectory, err)
	}

	for i, step := range g.config.Manifest.Steps {
		if step.Files != nil {
			if err := g.generateFiles(step.Files); err != nil {
				return fmt.Errorf(
					"[step %q, %d of %d] generate files: %w",
					step.Name,
					(i + 1),
					len(g.config.Manifest.Steps),
					err,
				)
			}
		}

		if strings.TrimSpace(step.Shell) != "" {
			if err := g.runShell(step.Shell); err != nil {
				return fmt.Errorf(
					"[step %q, %d of %d] run shell: %w",
					step.Name,
					(i + 1),
					len(g.config.Manifest.Steps),
					err,
				)
			}
		}
	}

	return nil
}

func (g *generator) generateFiles(files []File) error {
	for _, file := range files {
		t, err := g.parseTpl(g.config.Manifest, file)
		if err != nil {
			return err
		}

		var generated bytes.Buffer
		if err := t.Execute(&generated, g.config); err != nil {
			return fmt.Errorf("generate file from template %q: %w", file.Path, err)
		}

		outputPath, err := g.parseOutputPath(file)
		if err != nil {
			return err
		}

		pathDir := filepath.Dir(outputPath)
		if err := os.MkdirAll(pathDir, os.ModePerm); err != nil {
			return fmt.Errorf("failed to init directory %q: %w", pathDir, err)
		}

		if err := os.WriteFile(outputPath, generated.Bytes(), os.ModePerm); err != nil {
			return fmt.Errorf("failed to write generated file %q from template %q: %w", outputPath, t.Name(), err)
		}
	}

	return nil
}

func (g *generator) runShell(rawSh string) error {
	t, err := template.New("sh").Parse(rawSh)
	if err != nil {
		return fmt.Errorf("failed to parse shell script template: %w", err)
	}

	var sh strings.Builder
	t.Execute(&sh, g.config)

	output, err := exec.Command("sh", "-c", sh.String()).CombinedOutput()
	if err != nil {
		fmt.Fprintln(os.Stderr, string(output))
		return fmt.Errorf("failed to execute shell script: %w", err)
	}

	return nil
}

func (g *generator) parseTpl(manifest *TemplateManifest, file File) (*template.Template, error) {
	var (
		tplBytes    []byte
		err         error
		embedFSPath = fmt.Sprintf("resources/templates/%s/", manifest.Name)
	)

	if manifest.EmbeddedFS() != nil {
		tplBytes, err = g.readTplFileFromEmbeddedFS(manifest.EmbeddedFS(), filepath.Join(embedFSPath, file.Path))
	} else {
		tplBytes, err = g.readTplFileFromOS(file.Path)
	}

	if err != nil {
		return nil, err
	}

	t, err := template.New(file.Path).Parse(string(tplBytes))
	if err != nil {
		return nil, fmt.Errorf("failed to parse template %q: %w", file.Path, err)
	}

	return t, nil
}

func (g *generator) readTplFileFromEmbeddedFS(fs *embed.FS, path string) ([]byte, error) {
	f, err := fs.Open(path)
	if err != nil {
		return nil, fmt.Errorf("failed to open template file %q: %w", path, err)
	}
	defer f.Close()

	tplBytes, err := io.ReadAll(f)
	if err != nil {
		return nil, fmt.Errorf("failed to read template file %q, %w", path, err)
	}

	return tplBytes, nil
}

func (g *generator) readTplFileFromOS(path string) ([]byte, error) {
	f, err := os.OpenFile(path, os.O_RDONLY, os.ModePerm)
	if err != nil {
		return nil, fmt.Errorf("failed to open template file %q: %w", path, err)
	}
	defer f.Close()

	tplBytes, err := io.ReadAll(f)
	if err != nil {
		return nil, fmt.Errorf("failed to read template file %q, %w", path, err)
	}

	return tplBytes, nil
}

func (g *generator) parseOutputPath(file File) (string, error) {
	t, err := template.New(file.Output).Parse(file.Output)
	if err != nil {
		return "", fmt.Errorf("failed to parse output path template %q: %w", file.Output, err)
	}

	var outputPath strings.Builder
	if err := t.Execute(&outputPath, nil); err != nil {
		return "", fmt.Errorf("failed to render output path from template %q: %w", file.Output, err)
	}

	return filepath.Join(g.config.WorkingDirectory, outputPath.String()), nil
}
