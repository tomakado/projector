package projector

import (
	"bytes"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/tomakado/projector/internal/pkg/verbose"
	"github.com/tomakado/projector/pkg/manifest"
)

type provider interface {
	Get(filename string) ([]byte, error)
}

// Generate traverses template manifest passed inside config and executes listed steps with config passed as context.
func Generate(config *Config, provider provider) error {
	verbose.Println("passing config and provider to new instance of *projector.Generator")
	verbose.Printf("provider = %T, config = %+v", provider, *config)

	return NewGenerator(config, provider).Generate()
}

// Generator couples generation task and file provider into unite context to create project.
type Generator struct {
	config   *Config
	provider provider

	// optionalSteps is string set with included optional step names
	optionalSteps map[string]struct{}
}

func NewGenerator(config *Config, provider provider) *Generator {
	return &Generator{
		config:        config,
		provider:      provider,
		optionalSteps: map[string]struct{}{},
	}
}

// Generate traverses steps in project template manifest and performs actions defined inside each of them.
func (g *Generator) Generate() error {
	if err := g.makeOptionalStepSet(g.config.OptionalSteps); err != nil {
		return fmt.Errorf("makeOptionalStepSet: %w", err)
	}

	verbose.Printf("initializing working directory %q", g.config.WorkingDirectory)
	if err := os.MkdirAll(g.config.WorkingDirectory, os.ModePerm); err != nil {
		return fmt.Errorf("failed to mkdir %q: %w", g.config.WorkingDirectory, err)
	}

	verbose.Printf("cd %s", g.config.WorkingDirectory)
	if err := os.Chdir(g.config.WorkingDirectory); err != nil {
		return fmt.Errorf("failed to change working directory to %q: %w", g.config.WorkingDirectory, err)
	}

	verbose.Println("traversing manifest steps")
	for i, step := range g.config.Manifest.Steps {
		verbose.Printf("step %q, %d of %d", step.Name, (i + 1), len(g.config.Manifest.Steps))

		if step.IsOptional {
			if _, ok := g.optionalSteps[step.Name]; !ok {
				verbose.Printf("step %q is optional and not included to config, skipping", step.Name)
				continue
			}
			verbose.Printf("step %q is optional but included to config", step.Name)
		}

		if step.Files != nil {
			if err := g.ProcessFiles(step.Files); err != nil {
				return fmt.Errorf("[step %q] generate files: %w", step.Name, err)
			}
		}

		if strings.TrimSpace(step.Shell) != "" {
			if err := g.RunShell(step.Shell); err != nil {
				return fmt.Errorf("[step %q] run shell: %w", step.Name, err)
			}
		}
	}

	return nil
}

func (g *Generator) ProcessFiles(files []manifest.File) error {
	verbose.Println("processing files")

	for _, file := range files {
		t, err := g.ExtractTemplateFrom(file.Path)
		if err != nil {
			return err
		}

		verbose.Println("rendering file")
		var generated bytes.Buffer
		if err := t.Execute(&generated, g.config); err != nil {
			return fmt.Errorf("generate file from template %q: %w", file.Path, err)
		}

		if err := g.saveGeneratedFile(file, generated.Bytes()); err != nil {
			return err
		}
	}

	return nil
}

// ExtractTemplateFrom reads plain text from specified file and tries to parse it as text/template syntax.
func (g *Generator) ExtractTemplateFrom(filename string) (*template.Template, error) {
	verbose.Printf("extracting file template from %q", filename)
	tplBytes, err := g.provider.Get(filepath.Join(g.config.Manifest.Name, filename))
	if err != nil {
		return nil, err
	}

	verbose.Println("parsing file template")
	t, err := template.New(filename).Parse(string(tplBytes))
	if err != nil {
		// TODO wrap custom typed error
		return nil, fmt.Errorf("parse template in %q: %w", filename, err)
	}

	return t, nil
}

func (g *Generator) saveGeneratedFile(fileManifest manifest.File, data []byte) error {
	verbose.Printf("saving rendered file to %q", fileManifest.Output)
	outputPath, err := g.RenderOutputPath(fileManifest)
	if err != nil {
		return err
	}

	pathDir := filepath.Dir(outputPath)
	verbose.Printf("mkdir %s", pathDir)
	if err := os.MkdirAll(pathDir, os.ModePerm); err != nil {
		// TODO wrap custom typed error
		return fmt.Errorf("init dir %q: %w", pathDir, err)
	}

	verbose.Printf("writing rendered file to %q", outputPath)
	if err := os.WriteFile(outputPath, data, os.ModePerm); err != nil {
		// TODO wrap custom typed error
		return fmt.Errorf("write generated file to %q: %w", outputPath, err)
	}

	return nil
}

// RenderOutputPath renders output path for passed file from raw output path template.
func (g *Generator) RenderOutputPath(f manifest.File) (string, error) {
	verbose.Printf("parsing output path template %q", f.Output)
	t, err := template.New(f.Output).Parse(f.Output)
	if err != nil {
		// TODO wrap custom typed error
		return "", fmt.Errorf("parse output path template %q: %w", f.Output, err)
	}

	verbose.Printf("rendering output path template %q", f.Output)
	var outputPath strings.Builder
	if err := t.Execute(&outputPath, g.config); err != nil {
		// TODO wrap custom typed error
		return "", fmt.Errorf("render output path template %q: %w", f.Output, err)
	}

	return outputPath.String(), nil
}

// RunShell renders passed raw shell script template into actual shell script and then executes it.
func (g *Generator) RunShell(rawSh string) error {
	verbose.Printf("parsing shell script template %q", rawSh)
	t, err := template.New("sh").Parse(rawSh)
	if err != nil {
		// TODO wrap custom typed error (if possible)
		return fmt.Errorf("parse shell script template: %w", err)
	}

	verbose.Println("rendering shell script")
	var sh strings.Builder
	if err := t.Execute(&sh, g.config); err != nil {
		return fmt.Errorf("render shell script: %w", err)
	}

	verbose.Printf("executing shell script %q", sh.String())
	output, err := exec.Command("sh", "-c", sh.String()).CombinedOutput()
	if err != nil {
		fmt.Fprintln(os.Stderr, string(output))
		// TODO wrap custom typed error (if possible)
		return fmt.Errorf("exec shell script: %w", err)
	}

	return nil
}

func (g *Generator) makeOptionalStepSet(steps []string) error {
	verbose.Printf("resolving optional steps: %v", steps)
	for _, stepName := range steps {
		if _, err := g.config.Manifest.Steps.Get(stepName); err != nil {
			return fmt.Errorf("getStepByName: %w", err)
		}

		if _, ok := g.optionalSteps[stepName]; !ok {
			g.optionalSteps[stepName] = struct{}{}
		}
	}

	verbose.Printf("built optional step set: %v", g.optionalSteps)
	return nil
}
